plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.yanzhenjie.andserver'
    id 'io.objectbox'
    id 'maven-publish'
    id 'signing'
}

android {
    namespace 'com.loongwind.ardf.mock'
    compileSdk 33

    defaultConfig {
        minSdk 24
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.yanzhenjie.andserver:api:2.1.11'
    implementation 'com.google.code.gson:gson:2.10.1'
    kapt 'com.yanzhenjie.andserver:processor:2.1.11'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.source
}

task javadocs(type: Javadoc) {
    source = 'src/main/java/null'
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    excludes = ['**/*.kt']
}

task javadocJar(type: Jar, dependsOn: javadocs) {
    archiveClassifier.set('javadoc')
    from javadocs.destinationDir
}

artifacts {
    archives androidSourcesJar
    archives javadocJar
}


Properties properties = new Properties()
properties.load(project.rootProject.file('maven.properties').newDataInputStream())

publishing {
    publications {
        maven(MavenPublication) {
            groupId properties.getProperty('GROUP_ID') //开通maven central时候定义的
            artifactId 'mock' //资源名称
            version properties.getProperty('VERSION_NAME') //版本名称
            pom {
                name = 'mock'
                description = 'android mock server'
                url =  properties.getProperty('POM_URL')
                inceptionYear =  properties.getProperty('POM_INCEPTION_YEAR')

                scm {
                    url =  properties.getProperty('POM_URL')
                    connection =  properties.getProperty('POM_SCM_CONNECTION')
                    developerConnection = properties.getProperty('POM_SCM_DEV_CONNECTION')
                }

                licenses {
                    license {
                        name = properties.getProperty('POM_LICENCE_NAME')
                        url = properties.getProperty('POM_LICENCE_URL')
                        distribution = properties.getProperty('POM_LICENCE_DIST')
                        comments = properties.getProperty('POM_LICENCE_COMMENTS')
                    }
                }

                developers {
                    developer {
                        id = properties.getProperty('POM_DEVELOPER_ID')
                        name = properties.getProperty('POM_DEVELOPER_NAME')
                        email = properties.getProperty('POM_DEVELOPER_EMAIL')
                        url = properties.getProperty('POM_DEVELOPER_URL')
                    }
                }

                issueManagement {
                    system = properties.getProperty('POM_ISSUE_MANAGEMENT_SYSTEM')
                    url = properties.getProperty('POM_ISSUE_MANAGEMENT_URL')
                }
            }
            // pom文件中声明依赖，从而传递到使用方
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    // 避免出现空节点或 artifactId=unspecified 的节点
                    if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                        println "dependency=${it.toString()}"
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'implementation')
                    }
                }
            }
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            def snapshotsUrl = properties.getProperty('MAVEN_SNAPSHOTS_URL')
            def releaseUrl = properties.getProperty('MAVEN_RELEASE_URL')
            url = properties.getProperty('VERSION_NAME').endsWith('SNAPSHOT') ? snapshotsUrl : releaseUrl
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}
signing {
    sign publishing.publications.maven //签名配置
}